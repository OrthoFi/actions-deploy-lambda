name: Deploy Lambda Application
inputs:
  app-domain:
    description: Name of the application (patient, user, etc.)
    required: true
  app-env-name:
    description: Name of the environment to deploy to (heart, dev, etc.)
    required: true
  aws-dev-build-role:
    description: secrets.OCKERS_BUILD_ROLE
    required: true
  image-name:
    description: Name of the image (patient-lambda, billing-api, etc.)
    required: false
  app-lambda-command:
    description: Command string to run for the current image uri (e.g. "OrthoFi.Billing.Lambdas::OrthoFi.Billing.Lambdas.AssessLateFeeLambda::Handle")
    required: true
  app-lambda-name:
    description: Name of the lambda (assessLateFee, integrationEvents, etc)
    required: true
  aws-production-build-role:
    description: secrets.PRODUCTION_BUILD_ROLE
    required: true
  aws-access-key-id:
    description: secrets.BUILD_AWS_ACCESS_KEY_ID
    required: true
  aws-secret-access-key:
    description: secrets.BUILD_AWS_SECRET_ACCESS_KEY
    required: true

runs:
  using: composite
  steps:
    - name: Set AWS Role
      id: set-role
      uses: orthofi/actions-set-build-role@v1
      with:
        production-role: ${{ inputs.aws-production-build-role }}
        dev-role: ${{ inputs.aws-dev-build-role }}
        environment-name: ${{ inputs.app-env-name }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-east-1
        role-to-assume: ${{ steps.set-role.outputs.build-role }}

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Deploy
      shell: pwsh
      run: |
        ${{ github.action_path }}/deploy.ps1 `
          -Command ${{ inputs.app-lambda-command }} `
          -Domain ${{ inputs.app-domain }} `
          -FunctionName ${{ inputs.app-env-name }}-${{ inputs.app-domain }}-${{ inputs.app-lambda-name }} `
          -ImageName "${{ inputs.image-name }}" `
          -Sha ${{ github.sha }}
